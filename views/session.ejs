<html>

<head>
	<%-partial('./blocks/bootstrap_header.ejs')%>

	<link rel="styleSheet" href="css/style.css" type="text/css" media="screen"></link>
    <!-- <link rel="stylesheet" href="css/main.css"> -->
    <link rel="stylesheet" href="css/about.css">
	<script src="js/openvidu-browser-1.8.0.js"></script>
</head>

<body>

  <%-partial('./blocks/navbar.ejs')%>

	<div id="main-container" class="container">
		<div id="logged">
			<div id="session">
				<div id="session-header">
					<h1 id="session-title"><%= sessionName %></h1>
					<form action="/leave-session" method="post">
						<input type="hidden" name="sessionID" value="<%= sessionID %>"></input>
            <input type="hidden" name="ovSessionId" value="<%= ovSessionId %>"></input>
						<input type="hidden" name="token" value="<%= token %>"></input>
						<button id="buttonLeaveSession" class="btn btn-large btn-danger" type="submit" onclick="leaveSession()">Leave session</button>
					</form>
				</div>
				<div id="main-video" class="col-md-6">
					<p class="nickName"></p>
					<p class="userName"></p>
					<video autoplay="true"></video>
				</div>
				<div id="video-container" class="col-md-6"></div>
			</div>
		</div>
	</div>

  <%-partial('./blocks/bootstrap_js.ejs')%>
</body>

<script>
	// Get all the attributes from the template in EJS style
	var sessionId = <%- JSON.stringify(ovSessionId) %>;
	var token = <%- JSON.stringify(token) %>;
	var nickName = <%- JSON.stringify(nickName) %>;
	var userName = <%- JSON.stringify(userName) %>;
	var sessionName = <%- JSON.stringify(sessionName) %>;
	console.warn('Request of SESSIONID and TOKEN gone WELL (SESSIONID:' + sessionId + ", TOKEN:" + token + ")");


	var OV = new OpenVidu();
	var session = OV.initSession(sessionId);

	session.on('streamCreated', function (event) {
		var subscriber = session.subscribe(event.stream, 'video-container');

		subscriber.on('videoElementCreated', function (event) {
			appendUserData(event.element, subscriber.stream.connection);
		});
	});

	session.on('streamDestroyed', function (event) {
		removeUserData(event.stream.connection);
	});

	session.connect(token, '{"clientData": "' + nickName + '"}', function (error) {

		if (!error) {
            var publisher = OV.initPublisher('video-container', {
                audio: true,        // Whether you want to transmit audio or not
                video: true,        // Whether you want to transmit video or not
                audioActive: true,  // Whether you want to start the publishing with your audio unmuted or muted
                videoActive: true,  // Whether you want to start the publishing with your video enabled or disabled
                quality: 'MEDIUM',  // The quality of your video ('LOW', 'MEDIUM', 'HIGH')
                screen: false       // true to get your screen as video source instead of your camera
            });

            publisher.on('videoElementCreated', function (event) {
                // Init the main video with ours and append our data
                var userData = {
                    nickName: nickName,
                    userName: userName
                };
                initMainVideo(event.element, userData);
                appendUserData(event.element, userData);
                $(event.element).prop('muted', true); // Mute local video
            });

            session.publish(publisher);
		} else {
			console.warn('There was an error connecting to the session:', error.code, error.message);
		}
	});

	function leaveSession() {
		session.disconnect();
	}

	function appendUserData(videoElement, connection) {
		var clientData;
		var serverData;
		var nodeId;
		if (connection.nickName) { // Appending local video data
			clientData = connection.nickName;
			serverData = connection.userName;
			nodeId = 'main-videodata';
		} else {
			clientData = JSON.parse(connection.data.split('%/%')[0]).clientData;
			serverData = JSON.parse(connection.data.split('%/%')[1]).serverData;
			nodeId = connection.connectionId;
		}
		var dataNode = document.createElement('div');
		dataNode.className = "data-node";
		dataNode.id = "data-" + nodeId;
		dataNode.innerHTML = '<p class="nickName">' + clientData + '</p><p class="userName">' + serverData + '</p>';
		videoElement.parentNode.insertBefore(dataNode, videoElement.nextSibling);
		addClickListener(videoElement, clientData, serverData);
	}

	function removeUserData(connection) {
		var userNameRemoved = $("#data-" + connection.connectionId);
		if ($(userNameRemoved).find('p.userName').html() === $('#main-video p.userName').html()) {
			cleanMainVideo(); // The participant focused in the main video has left
		}
		$("#data-" + connection.connectionId).remove();
	}

	function removeAllUserData() {
		$(".data-node").remove();
	}

	function cleanMainVideo() {
		$('#main-video video').get(0).srcObject = null;
		$('#main-video p').each(function () {
			$(this).html('');
		});
	}

	function addClickListener(videoElement, clientData, serverData) {
		videoElement.addEventListener('click', function () {
			var mainVideo = $('#main-video video').get(0);
			if (mainVideo.srcObject !== videoElement.srcObject) {
				$('#main-video p.nickName').html(clientData);
				$('#main-video p.userName').html(serverData);
				mainVideo.srcObject = videoElement.srcObject;
			}
		});
	}

	function initMainVideo(videoElement, userData) {
		$('#main-video video').get(0).srcObject = videoElement.srcObject;
		$('#main-video p.nickName').html(userData.nickName);
		$('#main-video p.userName').html(userData.userName);
		$('#main-video video').prop('muted', true);
	}

	function initMainVideoThumbnail() {
		$('#main-video video').css("background", "url('images/subscriber-msg.jpg') round");
	}

	function isPublisher() {
		return userName.includes('publisher');
	}

    function httpRequest(method, url, body, errorMsg, callback) {
    	var http = new XMLHttpRequest();
    	http.open(method, url, true);
    	http.setRequestHeader('Content-type', 'application/json');
    	http.addEventListener('readystatechange', processRequest, false);
    	http.send(body);

    	function processRequest() {
    		if (http.readyState == 4) {
    			if (http.status == 200) {
    				try {
    					callback(JSON.parse(http.responseText));
    				} catch (e) {
    					callback();
    				}
    			} else {
    				console.warn(errorMsg);
    				console.warn(http.responseText);
    			}
    		}
    	}
    }

</script>

</html>
